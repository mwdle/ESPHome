substitutions:
  device_name: emr
  device_description: ESP8266 Music Remote
  friendly_name: Music Remote
  ip_address: 192.168.0.107
  gateway: 192.168.0.1
  subnet: 255.255.255.0

esphome:
  name: ${device_name}
  comment: ${device_description}

esp8266:
  board: nodemcuv2
  framework:
    version: latest

wifi:
  ssid: !secret wifissid
  password: !secret wifipass
  power_save_mode: none # Ensure the device remains connected and active so it can always have the correct state. Supposedly this option also helps with preventing unexpected resets on ESP8266 devices.
  fast_connect: true # Don't do a full scan, connect immediately.
  manual_ip:
    static_ip: ${ip_address}
    gateway: ${gateway}
    subnet: ${subnet}

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Fallback Hotspot"
    password: !secret fallbackpass

captive_portal:

# Disable logging to save memory/battery
# logger:
#   baud_rate: 0
#   level: DEBUG
#   logs:
#     component: ERROR

# Enable Home Assistant API
api:
  # encryption: # ESP8266 isn't powerful enough to remain stable while providing encryption. Enabling encryption may result in frequent and unexpected resets.
  #   key: !secret encryption_key

# Enable OTA updates
ota:
  - platform: esphome
    id: my_ota
    password: !secret otapass

# Disable web server to save memory/battery
# web_server:
#   version: 3
#   port: 80
#   auth:
#     username: !secret otauser
#     password: !secret otapass

font:
  - file:
      url: "https://raw.githubusercontent.com/googlefonts/opensans/main/fonts/ttf/OpenSans-Regular.ttf"
      type: web
    id: opensans
    size: 12
    glyphs:
      "'’&@!,.?\"%()[]+-=`~#*_:°•0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz|/àáãôçñ"

  - file:
      url: "https://raw.githubusercontent.com/Templarian/MaterialDesign-Webfont/master/fonts/materialdesignicons-webfont.ttf"
      type: web
    id: mdi_16
    size: 16
    glyphs: [
      '󰕾', # volume-high
      '󰤟', # wifi-strength-1
      '󰤢', # wifi-strength-2
      '󰤥', # wifi-strength-3
      '󰤨', # wifi-strength-4
      '󰄘', # cast
      '󰄙', # cast-connected
      '󰃟', # brightness-6
      '󰍺', # monitor-multiple
    ]

  - file:
      url: "https://raw.githubusercontent.com/Templarian/MaterialDesign-Webfont/master/fonts/materialdesignicons-webfont.ttf"
      type: web
    id: mdi_18
    size: 18
    glyphs: [
      '󰏤', # pause
      '󰐊', # play
      '󰒮', # skip-previous
      '󰒭', # skip-next
      '󱬐', # volume-equal
    ]

i2c:
  sda: D7
  scl: D6
  scan: true
  frequency: 400kHz # This might help prevent blocking delays and unexpected resets caused by display components. Commenting this out results in no wifi connection.

time:
  - platform: homeassistant
    id: esptime

# Balance/reduce OLED burn-in by inverting the display colors each minute
interval:
  - interval: 1min
    then:
      - lambda: |-
          static bool inverted = false;
          inverted = !inverted;
          id(screen).set_invert(inverted);

# Script to draw physical button icon representations on the display
script:
  id: render_ui_controls
  then:
    - lambda: |-
        id(screen).line(0, 47, 127, 47); // Horizontal line
        id(screen).print(13, 57, id(mdi_16), TextAlign::CENTER, "󰍺"); // monitor-multiple icon
        id(screen).print(41, 56, id(mdi_18), TextAlign::CENTER, "󰒮"); // skip-previous icon
        if (id(media_status).state == "playing" || id(media_status).state == "buffering") id(screen).print(67, 56, id(mdi_18), TextAlign::CENTER, "󰏤"); // pause icon
        else id(screen).print(65, 56, id(mdi_18), TextAlign::CENTER, "󰐊"); // play icon
        id(screen).print(91, 56, id(mdi_18), TextAlign::CENTER, "󰒭"); // skip-next icon
        id(screen).print(117, 56, id(mdi_18), TextAlign::CENTER, "󱬐"); // volume-equal icon

display:
  - platform: ssd1306_i2c
    id: screen
    model: "SSD1306 128x64"
    address: 0x3C
    rotation: 180°
    contrast: 0% # Use the lowest brightness to save battery life
    pages:
      - id: playbackPage
        lambda: |-
          const char* title = id(media_title).state.c_str();
          const char* artist = id(media_artist).state.c_str();

          if (global_api_server->is_connected() && title[0] != '\0') {
            int title_width = 0, artist_width = 0, ignored1, ignored2, ignored3;
            id(opensans)->measure(title, &title_width, &ignored1, &ignored2, &ignored3);
            id(opensans)->measure(artist, &artist_width, &ignored1, &ignored2, &ignored3);
            int half_title_width = title_width / 2;
            int half_artist_width = artist_width / 2;

            static int title_scroll_pos = 64, wrapped_title_scroll_pos = 120 + half_title_width;
            static int artist_scroll_pos = 64, wrapped_artist_scroll_pos = 120 + half_artist_width;

            // Draw title text:
            if (title_width >= 122) {
              if (title_scroll_pos + half_title_width < 0) {
                title_scroll_pos = wrapped_title_scroll_pos;
                wrapped_title_scroll_pos = 120 + half_title_width;
              } else if (title_scroll_pos + half_title_width < 64) {
                it.print(wrapped_title_scroll_pos, 10, id(opensans), TextAlign::CENTER, title);
                wrapped_title_scroll_pos -= 24;
              }
              it.print(title_scroll_pos, 10, id(opensans), TextAlign::CENTER, title);
              title_scroll_pos -= 24;
            } else it.print(64, 10, id(opensans), TextAlign::CENTER, title);

            // Draw artist text:
            if (artist_width >= 122) {
              if (artist_scroll_pos + half_artist_width < 0) {
                artist_scroll_pos = wrapped_artist_scroll_pos;
                wrapped_artist_scroll_pos = 120 + half_artist_width;
              } else if (artist_scroll_pos + half_artist_width < 64) {
                it.print(wrapped_artist_scroll_pos, 24, id(opensans), TextAlign::CENTER, artist);
                wrapped_artist_scroll_pos -= 24;
              }
              it.print(artist_scroll_pos, 24, id(opensans), TextAlign::CENTER, artist);
              artist_scroll_pos -= 24;
            } else it.print(64, 24, id(opensans), TextAlign::CENTER, artist);

            // Draw Volume Bar:
            it.print(1, 31, id(mdi_16), COLOR_ON, "󰕾", COLOR_OFF); // Print volume-high icon
            it.rectangle(18, 36, 107, 6); // Volume bar outline
            it.filled_rectangle(19, 37, int(id(media_volume).state * 106), 4); // Volume bar fill
          } 
          else it.print(64, 24, id(opensans), TextAlign::CENTER, "Player not connected");

          // Draw common UI controls:
          id(render_ui_controls).execute();

      - id: statsPage
        lambda: |-
          // Draw Stats
          auto wifi_signal = id(${device_name}_wifi_signal).state;
          if (wifi_signal < -75) it.print(3, 0, id(mdi_16), "󰤟"); // wifi-strength-1
          else if (wifi_signal < -50) it.print(3, 0, id(mdi_16), "󰤢"); // wifi-strength-2
          else if (wifi_signal < -25) it.print(3, 0, id(mdi_16), "󰤥"); // wifi-strength-3
          else it.print(3, 0, id(mdi_16), "󰤨"); // wifi-strength-4
          it.printf(22, 0, id(opensans), "%.0f%%", wifi_signal);
          bool api_connected = global_api_server->is_connected();
          if (api_connected) it.print(2, 15, id(mdi_16), "󰄙"); // cast-connected icon
          else it.print(2, 14, id(mdi_16), "󰄘"); // cast icon
          it.print(22, 14, id(opensans), api_connected ? "Connected" : "Disconnected");
          it.print(2, 30, id(mdi_16), "󰃟"); // brightness-6 icon
          it.printf(22, 29, id(opensans), "%.2f%%", id(undecided).state);
          // Draw common UI controls:
          id(render_ui_controls).execute();

binary_sensor:
  - platform: gpio
    internal: true
    pin:
      number: D3
      mode:
        input: true
        pullup: true
    id: next_page_button
    on_press:
      - display.page.show_next: screen
  - platform: gpio
    internal: true
    pin:
      number: RX
      mode:
        input: true
        pullup: true
    id: media_previous_track
    on_press:
      - homeassistant.service:
          service: media_player.media_previous_track
          data:
            entity_id: media_player.audio
  - platform: gpio
    internal: true
    pin:
      number: D4
      mode:
        input: true
        pullup: true
    id: media_play_pause
    on_press:
      - homeassistant.service:
          service: media_player.media_play_pause
          data:
            entity_id: media_player.audio
  - platform: gpio
    internal: true
    pin:
      number: D5
      mode:
        input: true
        pullup: true
    id: media_next_track
    on_press:
      - homeassistant.service:
          service: media_player.media_next_track
          data:
            entity_id: media_player.audio
  - platform: gpio
    internal: true
    pin:
      number: D8
      inverted: true
      mode:
        input: true # Internal pullup not available on D8, needs external pullup resistor
    id: media_volume_sync
    on_press:
      - homeassistant.service:
          service: script.sync_audio_group_volume

button:
  - platform: restart
    name: "Restart ${friendly_name}"
    icon: mdi:restart

sensor:
  - platform: adc
    id: undecided
    pin: A0
    name: "undecided"
    update_interval: 30s
    # on_value:
    #   then:
    #     - lambda: |-
    internal: true
  - platform: rotary_encoder
    name: "Volume"
    id: volume
    pin_a:
      number: D2
      mode:
        input: true
        pullup: true
    pin_b:
      number: D1
      mode:
        input: true
        pullup: true
    on_clockwise:
      - homeassistant.service:
          service: media_player.volume_up
          data:
            entity_id: media_player.audio
    on_anticlockwise:
      - homeassistant.service:
          service: media_player.volume_down
          data:
            entity_id: media_player.audio
    filters:
      - debounce: 50ms
    internal: true
  - platform: wifi_signal
    name: "${friendly_name} WiFi signal"
    id: "${device_name}_wifi_signal"
    update_interval: 60s
    icon: mdi:broadcast
  - platform: homeassistant
    id: media_volume
    entity_id: media_player.audio_direct
    attribute: volume_level
    unit_of_measurement: "%"
    internal: true

text_sensor:
  - platform: version
    name: "${friendly_name} ESPHome Version"
    id: "${device_name}_esphome_version"
    icon: mdi:numeric
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} IP Address
      icon: mdi:ip-network
    ssid:
      name: ${friendly_name} Connected SSID
      icon: mdi:wifi-star
    mac_address:
      name: ${friendly_name} Mac Wifi Address
      icon: mdi:router-network-wireless
  - platform: homeassistant
    id: media_title
    entity_id: media_player.audio_direct
    attribute: media_title
    internal: true
  - platform: homeassistant
    id: media_artist
    entity_id: media_player.audio_direct
    attribute: media_artist
    internal: true
  - platform: homeassistant
    id: media_status
    entity_id: media_player.audio_direct
    internal: true